@model Burger_Station.Models.User
@using Burger_Station.Data

@{
    ViewData["Title"] = "DetailsAdmin";
}

<!DOCTYPE html>
<meta charset="utf-8">

<h1>Details</h1>

<div>
    <h4>User</h4>
    <hr />
    <dl class="row">
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.Type)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.Type)
        </dd>
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.FirstName)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.FirstName)
        </dd>
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.LastName)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.LastName)
        </dd>
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.Email)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.Email)
        </dd>
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.Password)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.Password)
        </dd>
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.Birthday)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.Birthday)
        </dd>
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.FavoriteItem)
        </dt>
        <dd class="col-sm-10">
            @ViewBag.FavoriteItem
        </dd>
    </dl>
</div>


<!-- Facebook SDK -->
<script type="text/javascript" src="~/Content/JSFiles/site.js"></script>
<script>
    window.fbAsyncInit = function () {
        FB.init({
            appId: '2560600564202212',
            cookie: true,
            xfbml: true,
            version: 'v8.0'
        });

        FB.AppEvents.logPageView();
    };

    (function (d, s, id) {
        var js, fjs = d.getElementsByTagName(s)[0];
        if (d.getElementById(id)) { return; }
        js = d.createElement(s); js.id = id;
        js.src = "https://connect.facebook.net/en_US/sdk.js";
        fjs.parentNode.insertBefore(js, fjs);
    }(document, 'script', 'facebook-jssdk'));
</script>


<!-- Facebook post -->
<label> Post on our Facebook Page: </label>
<br />
<br />
<textarea style="width:600px; height:100px;" name="text" placeholder="Type your status here!" id="postTxt"></textarea>
<br />
<button style="width:600px;" onclick="postAStatus()"> Publish </button>

<br />
<br />
<br />

<!--- D3 Pie Chart--->
<!-- Imports d3js libraries -->
<script src="https://d3js.org/d3.v5.js"></script>
<script src="https://d3js.org/d3-scale.v3.min.js"></script>
<script src="https://d3js.org/d3-axis.v1.min.js"></script>

<!-- Color scale -->
<script src="https://d3js.org/d3-scale-chromatic.v1.min.js"></script>

<!-- Add 2 buttons -->
<button style="float:right" onclick="update(data1)">Members/Admins</button>
<button style="float:right" onclick="update(data2)">Favorite Item</button>

<!-- Create a div where the graph will take place -->


<center>
    <div id="secondApp">
        <div id="secondChart">
            <svg id="secondSvg"></svg>
        </div>
        <div id="secondData">
            <ul>
                <li>
                    <span style="background-color: yellow;"> &nbsp; </span> &nbsp;&nbsp; Member users &nbsp;&nbsp; @ViewBag.userMember
                </li>
                <li>
                    <span style="background-color:blue;"> &nbsp; </span> &nbsp;&nbsp; Admin users &nbsp;&nbsp; @ViewBag.userAdmin
                </li>
            </ul>
        </div>
    </div>
</center>


<script type="text/javascript">

        var DATA2 = { a: @ViewBag.userAdmin, b: @ViewBag.userMember }
        var width = 450, height = 450, margin = 40;
        var radius = Math.min(width, height) / 2 - margin;
        var container = d3
            .select('#secondSvg')
            .attr("width", width)
            .attr("height", height)
            .append("g")
            .attr("transform", "translate(" + width / 2 + "," + height / 2 + ")");
        var pie = d3.pie()
            .value(data => data.value)
        var data_ready = pie(d3.entries(DATA2))
        var color = 'blue';
        container
            .selectAll('groups')
            .data(data_ready)
            .enter()
            .append('path')
            .attr('d', d3.arc()
                .innerRadius(0)
                .outerRadius(radius)
            )
            .attr('fill', () => {
                if (color == 'blue') { color = 'yellow'; return 'blue'; } else return 'yellow';
            })
            .attr("stroke", "black")
            .style("stroke-width", "2px")
            .style("opacity", 0.7);
    </script>




@*Create a div where the graph will take place
    <div style="float:right" id="my_dataviz"></div>
    <div>
        <script>

            // set the dimensions and margins of the graph
            var width = 450
            height = 450
            margin = 40

            // The radius of the pieplot is half the width or half the height (smallest one). I subtract a bit of margin.
            var radius = Math.min(width, height) / 2 - margin

            // append the svg object to the div called 'my_dataviz'
            var svg = d3.select("#my_dataviz")
                .append("svg")
                .attr("width", width)
                .attr("height", height)
                .append("g")
                .attr("transform", "translate(" + width / 2 + "," + height / 2 + ")");

            // create 2 data_set
            var data1 = { a:@ViewBag.usersType ,b: @ViewBag.usersType}


            var data2 = { a: 6, b: 16, c: 20, d: 14, e: 19, f: 12 }

            // set the color scale
            var color = d3.scaleOrdinal()
                .domain(["a", "b", "c", "d", "e", "f"])
                .range(d3.schemeDark2);

            // A function that create / update the plot for a given variable:
            function update(data) {

                // Compute the position of each group on the pie:
                var pie = d3.pie()
                    .value(function (d) { return d.value; })
                    .sort(function (a, b) { console.log(a); return d3.ascending(a.key, b.key); }) // This make sure that group order remains the same in the pie chart
                var data_ready = pie(d3.entries(data))

                // map to data
                var u = svg.selectAll("path")
                    .data(data_ready)

                // Build the pie chart: Basically, each part of the pie is a path that we build using the arc function.
                u
                    .enter()
                    .append('path')
                    .merge(u)
                    .transition()
                    .duration(1000)
                    .attr('d', d3.arc()
                        .innerRadius(0)
                        .outerRadius(radius)
                    )
                    .attr('fill', function (d) { return (color(d.data.key)) })
                    .attr("stroke", "white")
                    .style("stroke-width", "2px")
                    .style("opacity", 1)

                // remove the group that is not present anymore
                u
                    .exit()
                    .remove()

            }

            // Initialize the plot with the first dataset
            update(data1)

        </script>

    </div>*@




<div>
    <a asp-action="Edit" asp-route-id="@Model.Id">Edit</a> |
    <a asp-action="Index">All Users</a>
</div>


